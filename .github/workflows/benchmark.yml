name: Benchmark Models

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main]

jobs:
  benchmark:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name }}
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements.txt
      - name: Restore or save venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-py3.11-${{ hashFiles('requirements.txt') }}

      - name: Ensure .venv on PATH
        if: steps.cache-venv.outputs.cache-hit == 'true'
        run: echo "$GITHUB_WORKSPACE/.venv/bin" >> "$GITHUB_PATH"
      - name: Build venv if needed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        env:
          PIP_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -r requirements.txt
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
      - name: Install package and ASV
        env:
          PIP_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu
        run: |
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install torch==2.3.0 --index-url https://download.pytorch.org/whl/cpu
          pip install -e .
          pip install asv
      - name: Configure ASV machine
        run: |
          . .venv/bin/activate
          asv machine --yes --machine github-actions
      - name: Run ASV benchmarks
        run: |
          . .venv/bin/activate
          # Run benchmarks for the current commit
          asv run --machine github-actions -E existing --python same HEAD^!
          # Show what was created
          ls -la .asv/results/github-actions/ || echo "No github-actions results directory"
      - name: Generate HTML reports
        run: |
          . .venv/bin/activate
          # Check what results exist before publishing
          echo "=== ASV Results before publish ==="
          find .asv/results -name "*.json" -exec echo "File: {}" \; -exec wc -l {} \;
          # Generate HTML
          asv publish --html-dir .asv/html
          # Check what HTML was generated
          echo "=== HTML files generated ==="
          ls -la .asv/html/ || echo "No HTML directory created"
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .asv/html
          force_orphan: true
      - name: Commit benchmark results
        if: github.event_name == 'pull_request'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .asv/results
          if ! git diff --cached --quiet; then
            git commit -m "Update ASV benchmark results"
            git push origin HEAD:${{ github.head_ref }}
          fi
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: .asv/results
